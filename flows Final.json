[
    {
        "id": "54f475575ae2a42e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6a5eebd2296250c5",
        "type": "mqtt in",
        "z": "54f475575ae2a42e",
        "name": "",
        "topic": "lapinamk/fitclock",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "55769160a9591fe8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "c90a7112aeebb5ad",
                "190a240fb9403cdb"
            ]
        ]
    },
    {
        "id": "c90a7112aeebb5ad",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Logic For State",
        "func": "// Initialize or retrieve counters and the current state from context storage\nlet sittingCount = context.get('sittingCount') || 0;\nlet idleCount = context.get('idleCount') || 0;\nlet currentState = context.get('currentState') || 'idle';\n\n// Extract distance and motion from the incoming payload\nconst distance = parseFloat(msg.payload.distance);\nconst motion = msg.payload.motion === true;\n\n// Determine if the conditions for sitting or idle are met\nif (motion && distance < 100) {\n    sittingCount++;\n    idleCount = 0;  // Reset idle counter since we have a sitting indication\n} else if (motion && distance > 100) {\n    idleCount++;\n    sittingCount = 0;  // Reset sitting counter since we have an idle indication\n} else {\n    // Reset both counters if neither condition is clearly met\n    sittingCount = 0;\n    idleCount = 0;\n}\n\n// Update the state based on the counters\nif (sittingCount >= 2 && currentState !== 'sitting') {\n    currentState = 'sitting';\n    sittingCount = 0;  // Reset the counter after confirming the state change\n} else if (idleCount >= 2 && currentState !== 'idle') {\n    currentState = 'idle';\n    idleCount = 0;  // Reset the counter after confirming the state change\n}\n\n// Store the updated counts and state in the context\ncontext.set('sittingCount', sittingCount);\ncontext.set('idleCount', idleCount);\ncontext.set('currentState', currentState);\n\n// Set the output message payload with state embedded\nmsg.payload.state = {\n    state: currentState,\n};\n\n// Return the modified message object to pass it to the next node in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "797ded34ddb8ee6e",
                "59b5a719833c1409",
                "4e427f6e07fd4e4b"
            ]
        ]
    },
    {
        "id": "797ded34ddb8ee6e",
        "type": "websocket out",
        "z": "54f475575ae2a42e",
        "name": "WS Out",
        "server": "fa246d6d41555952",
        "client": "",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "c47d39e9175ebbde",
        "type": "http in",
        "z": "54f475575ae2a42e",
        "name": "http",
        "url": "/fitclock",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 980,
        "wires": [
            [
                "397ff24f4945c539"
            ]
        ]
    },
    {
        "id": "397ff24f4945c539",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "script.js",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "// Function to update the time in Helsinki\nfunction updateTime() {\n    const optionsTime = {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: true\n    };\n\n    const optionsDate = {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    };\n\n    // Get Helsinki time and date\n    const helsinkiTime = new Date().toLocaleString('en-US', {\n        ...optionsTime,\n        timeZone: 'Europe/Helsinki'\n    });\n\n    const helsinkiDate = new Date().toLocaleString('en-US', {\n        ...optionsDate,\n        timeZone: 'Europe/Helsinki'\n    });\n\n    // Update the clock container\n    document.getElementById('time').textContent = helsinkiTime;  // Update time\n    document.getElementById('description').textContent = helsinkiDate;  // Update description\n}\n\n// Update time every second\nsetInterval(updateTime, 1000);\n\n// Initial call to display the time immediately\nupdateTime();\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const outsideTempElement = document.getElementById(\"outside-temperature\");\n\n    const fetchOutsideTemperature = async () => {\n        const apiKey = \"830841021b53c57aa999e1791975d01b\"; // Replace with your OpenWeatherMap API key\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=Rovaniemi&units=metric&appid=${apiKey}`;\n\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            outsideTempElement.textContent = `${data.main.temp}¬∞C`;\n        } catch (error) {\n            console.error(\"Error fetching outside temperature:\", error);\n            outsideTempElement.textContent = \"Error\";\n        }\n    };\n\n    fetchOutsideTemperature();\n});",
        "output": "str",
        "x": 200,
        "y": 980,
        "wires": [
            [
                "9a9f750ea4a6810f"
            ]
        ]
    },
    {
        "id": "4d63b265fed1bca8",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "style.css",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    margin: 0;\n    background-color: #222;\n    color: #fff;\n}\n\n/* Grid container */\n.dashboard {\n    display: grid;\n    grid-template-columns: 1fr 1fr; /* 2 columns */\n    gap: 20px;\n    width: 100vw;\n    height: 100vh;\n    background-color: darkblue;\n    padding: 40px;\n    border-radius: 10px;\n}\n\n/* Container styling */\n.container {\n    background-color: #333;\n    border-radius: 10px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\n}\n/* Flex layout for weather and sensors */\n#weather, #sensors {\n    flex-direction: row;  /* Align items horizontally */\n    justify-content: center; /* Center items horizontally */\n    align-items: center;  /* Center items vertically */\n}\n\n.weather-icon, .status-data {\n    margin-left: 10px;  /* Adds space between the text and icon */\n    font-size: 5rem;  /* Adjust the size of the icon */\n}\n\n/* Individual container styles */\n/*#main_dashboard{\n    background-color: darkblue;\n}\n*/\n#weather {\n    background-color: #4A90E2;\n}\n\n#clock {\n    background-color: #34495E;\n    justify-content: center;\n}\n\n#sensors {\n    background-color: #27AE60;\n}\n\n#notifications {\n    background-color: #E74C3C;\n    justify-content: center;\n}\n\n/* Sample text styling */\n.temp, .time, .sensor-data {\n    font-size: 6em;\n    font-weight: bold;\n}\n.notification {\n    font-size: 3em;\n    font-weight: bold;\n}\n\n.description {\n    font-size: 2em;\n    margin-top: 10px;\n    opacity: 0.8;\n}\n\n\n/* Weather container */\n#weather {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    padding: 20px 0;\n    gap: 20px;\n    box-sizing: border-box;\n}\n\n/* Individual weather box */\n.weather-box {\n    background-color: #2C3E50;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n    margin: 10px;\n    width: 120px;\n    height: 150px;\n    justify-content: space-around;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\n    text-align: center;\n    flex-grow: 1;\n    max-width: 200px;\n}\n\n/* Icon styling */\n.weather-box .icon {\n    font-size: 3rem;\n    color: #FFD700;\n}\n\n/* Title styling */\n.weather-box h3 {\n    font-size: 1.2rem;\n    margin: 0;\n    color: #fff;\n}\n\n/* Temperature and humidity values */\n.temp-value, .humidity-value {\n    font-size: 2.5rem;\n    font-weight: bold;\n    color: #FFD700;\n}\n\n.icon {\n    font-size: 5rem;\n    color: #FFD700;\n    margin-left: 10px;\n}",
        "output": "str",
        "x": 700,
        "y": 980,
        "wires": [
            [
                "1ba9f18b446f8083"
            ]
        ]
    },
    {
        "id": "1ba9f18b446f8083",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>FitClock</title>\n    <style>\n        {{{payload.style}}}\n    </style>\n\n</head>\n\n<body>\n\n    <div class=\"dashboard\" id=\"main_dashboard\">\n        <!-- Weather Container -->\n            <div class=\"container\" id=\"weather\">\n                <!-- Room Temperature (Sensor data) -->\n                <div class=\"weather-box\" id=\"room-temp\">\n                    <div class=\"icon\">üè†</div>\n                    <h3>Room Temp</h3>\n                    <div class=\"temp-value\" id=\"room-temperature\">22¬∞C</div>\n                </div>\n                <!-- Outdoor Temperature (OpenWeatherAPI data) -->\n                <div class=\"weather-box\" id=\"outside-temp\">\n                    <div class=\"icon\">‚òÅÔ∏è</div>\n                    <h3>Outside Temp</h3>\n                    <div class=\"temp-value\" id=\"outside-temperature\">Loading...</div>\n                </div>\n                <!-- Humidity (Sensor data) -->\n                <div class=\"weather-box\" id=\"humidity\">\n                    <div class=\"icon\">üíß</div>\n                    <h3>Humidity</h3>\n                    <div class=\"humidity-value\" id=\"humidity-value\">50%</div>\n                </div>\n            </div>\n\n        <!-- Clock Container -->\n        <div class=\"container\" id=\"clock\">\n            <div class=\"time\" id=\"time\">12:00</div>\n            <div class=\"description\" id=\"description\">Sunday, Jan 1, 2024</div>\n        </div>\n\n        <!-- Sensors Container -->\n        <div class=\"container\" id=\"sensors\">\n                <div class=\"sensor-data\">00:00:00</div>\n                <div class=\"status-data\">üßë‚Äçüíª</div> <!-- Status: Sitting or Idle -->\n        </div>\n\n        <!-- Notifications Container -->\n        <div class=\"container\" id=\"notifications\">\n            <div class=\"icon\">üí¨</div>\n            <div class=\"notification\" id=\"notification\"></div>\n        </div>\n    </div>\n    <!-- Link to external JS file -->\n    <script>\n        {{{payload.script}}}\n    </script>\n    <script>\n        {{{payload.timer}}}\n    </script>\n    <script>\n    {{{payload.notification}}}\n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "fc89f1bf96273b58"
            ]
        ]
    },
    {
        "id": "fc89f1bf96273b58",
        "type": "http response",
        "z": "54f475575ae2a42e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 980,
        "wires": []
    },
    {
        "id": "9a9f750ea4a6810f",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "timer.js + wsout(db)",
        "field": "payload.timer",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "// Connect to the Node-RED WebSocket\nconst ws = new WebSocket(\"ws://\" + window.location.host + \"/fitclock\");\n\nlet sittingTime = 0; // Sitting time in seconds\nlet idleCountdown = 0; // Idle countdown in seconds\nlet idlePausedTime = 0; // Time left when idle timer was paused\nlet idleCountdownDuration = 0; // Duration of idle countdown (2 or 5 minutes)\nlet sittingStartTime = null; // Timestamp when sitting starts\nlet currentState = null; // Current state (sitting/idle)\nlet timerInterval = null; // Timer for sitting or idle countdown\nlet breakSent = false; // Flag to prevent duplicate data sends\n\n// Helper function to format time\nfunction formatTime(seconds, showHours = false) {\n    const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');\n    const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');\n    const secs = String(seconds % 60).padStart(2, '0');\n    return showHours ? `${hrs}:${mins}:${secs}` : `${mins}:${secs}`;\n}\n\n// Start the timer\nfunction startTimer() {\n    if (timerInterval) clearInterval(timerInterval); // Clear any existing timer\n\n    timerInterval = setInterval(() => {\n        if (currentState === \"sitting\") {\n            sittingTime++;\n            console.log(`Sitting Time: ${sittingTime}s`);\n            updateUI(\"üßë‚Äçüíª\", formatTime(sittingTime, true));\n            // Reset the breakSent flag when sitting resumes\n            breakSent = false;\n        } else if (currentState === \"idle\") {\n            if (idleCountdown > 0) {\n                idleCountdown--;\n                console.log(`Idle Countdown: ${idleCountdown}s`);\n                updateUI(\"üí§üö∂\", formatTime(idleCountdown));\n            } else if (!breakSent) {\n                console.log(\"Idle Countdown Complete. Sending break data.\");\n                sendBreakData(); // Send data to Node-RED when the break ends\n                breakSent = true; // Mark break as sent\n                sittingTime = 0; // Reset sitting time only when idle countdown finishes\n                updateUI(\"üí§üö∂\", \"00:00\");\n            }\n        }\n    }, 1000);\n}\n\n// Update the UI\nfunction updateUI(status, timer) {\n    const statusElement = document.querySelector(\".status-data\");\n    const timerElement = document.querySelector(\".sensor-data\");\n\n    if (statusElement) statusElement.textContent = status;\n    if (timerElement) timerElement.textContent = timer;\n}\n\n// Send Break Data to Node-RED\nfunction sendBreakData() {\n    const breakData = {\n        timestamp: new Date().toISOString(),\n        break_duration: idleCountdownDuration, // 120 seconds (2 minutes) or 300 seconds (5 minutes)\n        break_type: idleCountdownDuration === 120 ? \"2-minutes\" : \"5-minutes\",\n        sitting_time: sittingTime // Send the stored sitting time\n    };\n\n    console.log(\"Sending Break Data:\", breakData);\n\n    // Send the data back to the WebSocket server\n    if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify(breakData));\n    } else {\n        console.error(\"WebSocket connection is not open.\");\n    }\n}\n\n// Handle incoming WebSocket messages\nws.onmessage = function (event) {\n    const data = JSON.parse(event.data);\n    const newState = data.state.state;\n\n    // Update Humidity and temperature\n    const temperature= data.temperature;\n    const humidity = data.humidity;\n    const temperatureElement = document.getElementById('room-temperature');\n    const humidityElement = document.getElementById('humidity-value');\n    temperatureElement.innerHTML = `${data.temperature}¬∞C`;\n    humidityElement.innerHTML = `${data.humidity}%`;\n\n\n    console.log(`Received State: ${newState}, Current State: ${currentState}`);\n\n    if (newState !== currentState) {\n        if (newState === \"sitting\") {\n            currentState = \"sitting\";\n            console.log(`Transitioning to Sitting. Sitting Time: ${sittingTime}s, Idle Countdown: ${idleCountdown}s`);\n            \n            if (!sittingStartTime) {\n                // Record the time when sitting starts\n                sittingStartTime = Date.now();\n            }\n\n            if (idleCountdown > 0) {\n                console.log(\"Idle timer paused.\");\n                idlePausedTime = idleCountdown; // Pause the idle timer\n            }\n\n            startTimer(); // Start the sitting timer\n        } else if (newState === \"idle\") {\n            currentState = \"idle\";\n            console.log(`Transitioning to Idle. Sitting Time: ${sittingTime}s, Idle Paused Time: ${idlePausedTime}s`);\n\n            // Check how long the user stayed in the sitting state\n            const sittingElapsedTime = sittingStartTime ? (Date.now() - sittingStartTime) / 1000 : 0;\n\n            if (sittingElapsedTime >= 15) {\n                console.log(\"Sitting time exceeded 15 seconds. Resetting idle timer.\");\n                idlePausedTime = 0; // Clear paused time\n                idleCountdown = 0; // Reset idle countdown\n            } else {\n                console.log(`Sitting time less than 15 seconds (${sittingElapsedTime}s). Resuming idle timer.`);\n                idleCountdown = idlePausedTime; // Resume paused idle timer\n            }\n\n            // Reset sitting start time\n            sittingStartTime = null;\n\n            if (!idleCountdown) {\n                // Start a new idle timer if no paused time exists\n                idleCountdownDuration = sittingTime <= 60 * 60 ? 120 : 300; // 2 or 5 minutes\n                idleCountdown = idleCountdownDuration;\n                console.log(`Starting New Idle Timer: ${idleCountdown}s`);\n            }\n\n            startTimer(); // Start idle timer\n        }\n    }\n};\n\n// WebSocket error handling\nws.onerror = function (error) {\n    console.error(\"WebSocket error:\", error);\n};\n\n// Log WebSocket connection status\nws.onopen = function () {\n    console.log(\"WebSocket connection established.\");\n};\n\nws.onclose = function () {\n    console.log(\"WebSocket connection closed.\");\n};\n",
        "output": "str",
        "x": 370,
        "y": 980,
        "wires": [
            [
                "a7d8977ca54051bc"
            ]
        ]
    },
    {
        "id": "ba2d040cdd98cfcf",
        "type": "websocket in",
        "z": "54f475575ae2a42e",
        "name": "WS in",
        "server": "fa246d6d41555952",
        "client": "",
        "x": 90,
        "y": 720,
        "wires": [
            [
                "function-node"
            ]
        ]
    },
    {
        "id": "function-node",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Prepare Data for SQLite",
        "func": "msg.payload = JSON.parse(msg.payload); // Convert payload string to JSON object\n\nconst sittingTimeInHours = msg.payload.sitting_time / 60; // Convert sitting time to hours\n\nconst sqlQuery = `\n    INSERT INTO data (timestamp, break_duration, break_type, sitting_time)\n    VALUES ('${msg.payload.timestamp}', ${msg.payload.break_duration}, '${msg.payload.break_type}', ${sittingTimeInHours});\n`;\n\nmsg.topic = sqlQuery; // Assign the SQL query to msg.topic\nreturn msg; // Return the modified msg object\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 720,
        "wires": [
            [
                "sqlite"
            ]
        ]
    },
    {
        "id": "b1f6351b60290126",
        "type": "comment",
        "z": "54f475575ae2a42e",
        "name": "MQTT Protocol >> Logic for \"Sitting\" or \"Idle\" >> Websocket in to send the data to HTTP",
        "info": "MQTT Protocol >> Logic for \"Sitting\" or \"Idle\" >> Websocket in to send the data to HTTP",
        "x": 450,
        "y": 120,
        "wires": []
    },
    {
        "id": "24bd599e93d043b2",
        "type": "comment",
        "z": "54f475575ae2a42e",
        "name": "MQTT Protocol >> Logic for \"Sitting\" or \"Idle\" >> Websocket in to send the data to HTTP",
        "info": "MQTT Protocol >> Logic for \"Sitting\" or \"Idle\" >> Websocket in to send the data to HTTP",
        "x": 450,
        "y": 920,
        "wires": []
    },
    {
        "id": "8a459f0ce8f60610",
        "type": "comment",
        "z": "54f475575ae2a42e",
        "name": "WS in from html >> Preapring th Data >> Using sqlite node to send data to database",
        "info": "MQTT Protocol >> Logic for \"Sitting\" or \"Idle\" >> Websocket in to send the data to HTTP",
        "x": 350,
        "y": 660,
        "wires": []
    },
    {
        "id": "a330141c216a1c18",
        "type": "comment",
        "z": "54f475575ae2a42e",
        "name": "SQL Injector >> SQLite Query to Get Data >> Function to Process Data",
        "info": "Dashboard >> SQL Injector >> SQLite Query to Get Data >> Function to Process Data",
        "x": 430,
        "y": 780,
        "wires": []
    },
    {
        "id": "66ca06e07d3bb6c6",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Process Data for Activity Graph",
        "func": "msg.payload = msg.payload.map(row => ({\n    timestamp: new Date(row.timestamp).toLocaleString(),\n    break_duration: row.break_duration,\n    sitting_time: row.sitting_time\n}));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 240,
        "wires": [
            [
                "814878f586396fe0"
            ]
        ]
    },
    {
        "id": "ea99bf74a431932d",
        "type": "comment",
        "z": "54f475575ae2a42e",
        "name": "Dashboard >> Activity Graph >> Summary Data >> Sensor Data >> States",
        "info": "Dashboard >> SQL Injector >> SQLite Query to Get Data >> Function to Process Data",
        "x": 400,
        "y": 320,
        "wires": []
    },
    {
        "id": "a7d8977ca54051bc",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "notification.js",
        "field": "payload.notification",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "document.addEventListener(\"DOMContentLoaded\", () => {\n    const notificationElement = document.querySelector('.notification');\n    const timeElement = document.getElementById('time');\n    const sensorDataElement = document.querySelector('.sensor-data');\n\n    const gentleBreakMessages = [\n        'Rise up and move around! Take a break for %d minutes!',\n        'Time for some stretches! Take a break for %d minutes!',\n        'Time to move your body! Take a break for %d minutes!'\n    ];\n\n    const moderateBreakMessages = [\n        'Time for a short walk! Take a break for %d minutes!',\n        'Go have a snack! Take a break for %d minutes!',\n        'Time for some exercise! Take a break for %d minutes!'\n    ];\n\n    const urgentBreakMessages = [\n        'Get up and move NOW! Take a break for %d minutes!',\n        'You‚Äôve been sitting for WAY too long! Take a break for %d minutes!',\n        'STOP SITTING! Take a break for %d minutes RIGHT NOW!'\n    ];\n\n    const greetings = {\n        morning: 'Good Morning! I‚Äôm FitClock, and I‚Äôm here to help you stay energized.',\n        afternoon: 'Good Afternoon! I‚Äôm FitClock, and I‚Äôm here to help you stay energized.',\n        evening: 'Good Evening! I‚Äôm FitClock, and I‚Äôm here to help you stay energized.',\n    };\n\n    let currentMessageIndex = { gentle: 0, moderate: 0, urgent: 0 };\n\n    // Function to get the next message in the sequence\n    function getNextMessage(messages, type) {\n        const index = currentMessageIndex[type];\n        const message = messages[index];\n        currentMessageIndex[type] = (index + 1) % messages.length;\n        return message;\n    }\n\n    // Calculate greeting based on the time of day\n    function getGreeting() {\n        const currentHour = new Date().getHours();\n        if (currentHour < 12) return greetings.morning;\n        if (currentHour < 18) return greetings.afternoon;\n        return greetings.evening;\n    }\n\n    // Display a notification with fade animation\n    function showNotification(message, breakDuration) {\n        const formattedMessage = message.replace('%d', breakDuration);\n\n        // Trigger fade-out\n        notificationElement.classList.add('fade-out');\n        setTimeout(() => {\n            // Change the text after fade-out completes\n            notificationElement.textContent = formattedMessage;\n            notificationElement.classList.remove('fade-out');\n\n            notificationElement.classList.add('fade-in');\n            setTimeout(() => {\n                notificationElement.classList.remove('fade-in');\n            }, 1000); // Match fade-in duration\n\n            // Send HTTP request to Node-RED to trigger the buzzer\n            fetch('/trigger-buzzer', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ action: 'trigger', duration: breakDuration }) // Send break duration as payload\n            })\n                .then(response => {\n                    if (!response.ok) {\n                        console.error('Failed to trigger the buzzer:', response.statusText);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error connecting to Node-RED:', error);\n                });\n\n            // After 3 seconds, fade back to the greeting\n            setTimeout(() => {\n                resetToGreeting();\n            }, 3000);\n        }, 1000); // Match fade-out duration\n    }\n\n    // Reset notification to the greeting\n    function resetToGreeting() {\n        const greeting = getGreeting();\n\n        // Trigger fade-out\n        notificationElement.classList.add('fade-out');\n        setTimeout(() => {\n            notificationElement.textContent = greeting;\n            notificationElement.classList.remove('fade-out');\n\n            // Trigger fade-in for greeting\n            notificationElement.classList.add('fade-in');\n            setTimeout(() => {\n                notificationElement.classList.remove('fade-in');\n            }, 1000); // Match fade-in duration\n        }, 1000); // Match fade-out duration\n    }\n\n    // Parse sitting time from `sensor-data`\n    function parseSittingTime() {\n        const sensorData = sensorDataElement.textContent; // Read from sensorDataElement\n        const [hours, minutes, seconds] = sensorData.split(':').map(Number); // Parse hh:mm:ss\n        return hours * 60 + minutes; // Convert to total minutes\n    }\n\n    // Handle sitting time and send appropriate reminders\n    function handleSittingTime() {\n        const sittingTime = parseSittingTime();\n        if (sittingTime >= 120) {\n            const message = getNextMessage(urgentBreakMessages, 'urgent');\n            showNotification(message, 5);\n        } else if (sittingTime >= 60) {\n            const message = getNextMessage(moderateBreakMessages, 'moderate');\n            showNotification(message, 5);\n        } else if (sittingTime >= 30) {\n            const message = getNextMessage(gentleBreakMessages, 'gentle');\n            showNotification(message, 2);\n        } else {\n            resetToGreeting();\n        }\n    }\n\n    // Initial handling\n    handleSittingTime();\n\n    // Recheck and update sitting time reminders every minute\n    setInterval(() => {\n        handleSittingTime();\n    }, 60000); // Every 60 seconds\n});\n",
        "output": "str",
        "x": 550,
        "y": 980,
        "wires": [
            [
                "4d63b265fed1bca8"
            ]
        ]
    },
    {
        "id": "7dbcb104c6830d08",
        "type": "http in",
        "z": "54f475575ae2a42e",
        "name": "Trigger Buzzer",
        "url": "/trigger-buzzer",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "abc73a3596c8fad4"
            ]
        ]
    },
    {
        "id": "abc73a3596c8fad4",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Handle Buzzer Trigger",
        "func": "const BUZZER_PIN = 17; // GPIO pin for the buzzer (change as needed)\n\n// Turn the buzzer on\nglobal.set(\"BUZZER_ACTIVE\", true); // Track active state globally\nmsg.payload = 1; // Activate buzzer\n\n// Schedule buzzer turn-off after 1 second\nsetTimeout(() => {\n    global.set(\"BUZZER_ACTIVE\", false); // Update global state\n    msg.payload = 0; // Deactivate buzzer\n    node.send(msg); // Send the off signal\n}, 1000); // 1 second duration\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1100,
        "wires": [
            [
                "3089531b51b59797",
                "d4188725c0e56f71"
            ]
        ]
    },
    {
        "id": "11bbbcadd19ab70f",
        "type": "debug",
        "z": "54f475575ae2a42e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 620,
        "wires": []
    },
    {
        "id": "1f9da3db12a29ec2",
        "type": "inject",
        "z": "54f475575ae2a42e",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 800,
        "wires": [
            [
                "0533a6ee37d80272"
            ]
        ]
    },
    {
        "id": "a0bce0b78283af67",
        "type": "debug",
        "z": "54f475575ae2a42e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 180,
        "wires": []
    },
    {
        "id": "d253c330779a623c",
        "type": "debug",
        "z": "54f475575ae2a42e",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 40,
        "wires": []
    },
    {
        "id": "814878f586396fe0",
        "type": "ui_template",
        "z": "54f475575ae2a42e",
        "group": "ui-group-graphs",
        "name": "Activity Graph",
        "order": 1,
        "width": 13,
        "height": 7,
        "format": "<div style=\"text-align: center; padding: 10px; background-color: #f9f9f9; border-radius: 10px; margin-bottom: 0px;\">\n    <label for=\"dateFilter\" style=\"font-size: 18px; margin-right: 10px; font-weight: bold;\">\n        <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i> Filter by Date:\n    </label>\n    <select id=\"dateFilter\" style=\"padding: 8px; font-size: 16px; border-radius: 5px; border: 1px solid #ccc;\">\n        <option value=\"all\">All</option>\n        <option value=\"today\" selected>Today</option>\n        <option value=\"yesterday\">Yesterday</option>\n        <option value=\"last7days\">Last 7 Days</option>\n        <option value=\"last30days\">Last 30 Days</option>\n    </select>\n</div>\n<canvas id=\"activityChart\"></canvas>\n\n<script>\n    (function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        const originalData = data;\n\n        const ctx = document.getElementById('activityChart').getContext('2d');\n        let chart;\n\n        // Function to filter data based on selected date range\n        function filterData(dateFilter) {\n            const filteredData = originalData.filter(d => {\n                const dataDate = new Date(d.timestamp);\n                const today = new Date();\n                today.setHours(0, 0, 0, 0); // Normalize time\n\n                if (dateFilter === 'today') {\n                    return dataDate >= today;\n                } else if (dateFilter === 'yesterday') {\n                    const yesterday = new Date(today);\n                    yesterday.setDate(today.getDate() - 1);\n                    return dataDate >= yesterday && dataDate < today;\n                } else if (dateFilter === 'last7days') {\n                    const last7Days = new Date(today);\n                    last7Days.setDate(today.getDate() - 7);\n                    return dataDate >= last7Days;\n                } else if (dateFilter === 'last30days') {\n                    const last30Days = new Date(today);\n                    last30Days.setDate(today.getDate() - 30);\n                    return dataDate >= last30Days;\n                }\n                return true; // Default to 'all'\n            });\n\n            return filteredData;\n        }\n\n        // Function to update the chart\n        function updateChart() {\n            const dateFilter = document.getElementById('dateFilter').value;\n            const filteredData = filterData(dateFilter);\n\n            const labels = filteredData.map(d => d.timestamp);\n            const breakDurations = filteredData.map(d => d.break_duration/60);\n            const sittingTimes = filteredData.map(d => d.sitting_time);\n\n            // Destroy existing chart instance if it exists\n            if (chart) chart.destroy();\n\n            // Create a new chart\n            chart = new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels,\n                    datasets: [\n                        {\n                            label: 'Break Duration (minutes)',\n                            data: breakDurations,\n                            backgroundColor: 'rgba(54, 162, 235, 0.8)', // Appealing blue\n                            borderColor: 'rgba(54, 162, 235, 1)',\n                            borderWidth: 1\n                        },\n                        {\n                            label: 'Sitting Time (minutes)',\n                            data: sittingTimes,\n                            backgroundColor: 'rgba(75, 192, 192, 0.8)', // Appealing green\n                            borderColor: 'rgba(75, 192, 192, 1)',\n                            borderWidth: 1\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    scales: {\n                        x: {\n                            stacked: false // Ensure bars are not stacked\n                        },\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n        }\n\n        // Initial chart render\n        updateChart();\n\n        // Add event listener for date filter dropdown\n        document.getElementById('dateFilter').addEventListener('change', updateChart);\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "190a240fb9403cdb",
        "type": "ui_template",
        "z": "54f475575ae2a42e",
        "group": "ui-group-summaries",
        "name": "Sensor Data",
        "order": 1,
        "width": 13,
        "height": 5,
        "format": "<div style=\"overflow-y: auto; height: 100%;\">\n    <table border=\"1\" style=\"height: 100%; width: 100%; text-align: center; border-collapse: collapse;\">\n        <thead>\n            <tr>\n                <th>Timestamp</th>\n                <th>Temperature (¬∞C)</th>\n                <th>Distance (cm)</th>\n                <th>Motion</th>\n                <th>Humidity (%)</th>\n            </tr>\n        </thead>\n        <tbody id=\"sensorTableBody\">\n        </tbody>\n    </table>\n</div>\n<script>\n    (function(scope) {\n    const maxRows = 10; // Maximum rows to display\n\n    scope.$watch('msg.payload', function(data) {\n        if (!data) return; // Ignore if no data is present\n\n        const tableBody = document.getElementById('sensorTableBody');\n        const newRow = document.createElement('tr');\n\n        // Create table cells and fill data\n        const timestampCell = document.createElement('td');\n        timestampCell.innerText = data.timestamp;\n        newRow.appendChild(timestampCell);\n\n        const temperatureCell = document.createElement('td');\n        temperatureCell.innerText = data.temperature.toFixed(1); // One decimal\n        newRow.appendChild(temperatureCell);\n\n        const distanceCell = document.createElement('td');\n        distanceCell.innerText = data.distance.toFixed(2); // Two decimals\n        // Highlight if distance is less than 100\n        if (data.distance < 100) {\n            distanceCell.style.backgroundColor = 'green';\n            distanceCell.style.color = 'white'; // Optional for better contrast\n        }\n        newRow.appendChild(distanceCell);\n\n        const motionCell = document.createElement('td');\n        motionCell.innerText = data.motion ? 'True' : 'False';\n        // Highlight if motion is true\n        if (data.motion) {\n            motionCell.style.backgroundColor = 'green';\n            motionCell.style.color = 'white'; // Optional for better contrast\n        }\n        newRow.appendChild(motionCell);\n\n        const humidityCell = document.createElement('td');\n        humidityCell.innerText = data.humidity.toFixed(1); // One decimal\n        newRow.appendChild(humidityCell);\n\n        // Prepend the new row to the table (add to the top)\n        tableBody.insertBefore(newRow, tableBody.firstChild);\n\n        // Remove excess rows to maintain maxRows limit\n        while (tableBody.rows.length > maxRows) {\n            tableBody.deleteRow(maxRows); // Remove the last (oldest) row\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 290,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "df0d2da7a1e07c21",
        "type": "ui_template",
        "z": "54f475575ae2a42e",
        "group": "ui-group-sensors",
        "name": "Summary Data",
        "order": 2,
        "width": 11,
        "height": 7,
        "format": "<div style=\"text-align: center; padding: 10px; background-color: #f9f9f9; border-radius: 10px; margin-bottom: 0px;\">\n    <label for=\"uniqueDateFilter\" style=\"font-size: 18px; margin-right: 10px; font-weight: bold;\">\n        <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i> Filter by Date:\n    </label>\n    <select id=\"uniqueDateFilter\" style=\"padding: 8px; font-size: 16px; border-radius: 5px; border: 1px solid #ccc;\">\n        <option value=\"all\">All</option>\n        <option value=\"today\" selected>Today</option>\n        <option value=\"yesterday\">Yesterday</option>\n        <option value=\"last7days\">Last 7 Days</option>\n        <option value=\"last30days\">Last 30 Days</option>\n    </select>\n</div>\n\n<!-- Flexbox Container -->\n<div style=\"display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; margin-top: 10px;\">\n    <!-- Each Metric Card -->\n    <div\n        style=\"background-color: #ffffff; border: 1px solid #ddd; border-radius: 10px; padding: 20px; width: 200px; height: 100px; display: flex; flex-direction: column; align-items: center; justify-content: center;\">\n        <i class=\"fa fa-clock-o\" aria-hidden=\"true\" style=\"font-size: 40px; color: #007bff;\"></i>\n        <h3 style=\"margin: 10px 0 5px; font-size: 18px;\">Total Sitting Time</h3>\n        <p id=\"uniqueTotalSittingTime\" style=\"font-size: 20px; font-weight: bold; color: #007bff;\">-- mins</p>\n    </div>\n    <div\n        style=\"background-color: #ffffff; border: 1px solid #ddd; border-radius: 10px; padding: 20px; width: 200px; height: 100px; display: flex; flex-direction: column; align-items: center; justify-content: center;\">\n        <i class=\"fa fa-coffee\" aria-hidden=\"true\" style=\"font-size: 40px; color: #28a745;\"></i>\n        <h3 style=\"margin: 10px 0 5px; font-size: 18px;\">Total Breaks</h3>\n        <p id=\"uniqueTotalBreaks\" style=\"font-size: 20px; font-weight: bold; color: #28a745;\">--</p>\n    </div>\n    <div\n        style=\"background-color: #ffffff; border: 1px solid #ddd; border-radius: 10px; padding: 20px; width: 200px; height: 100px; display: flex; flex-direction: column; align-items: center; justify-content: center;\">\n        <i class=\"fa fa-trophy\" aria-hidden=\"true\" style=\"font-size: 40px; color: #ffc107;\"></i>\n        <h3 style=\"margin: 10px 0 5px; font-size: 18px;\">Longest Sitting</h3>\n        <p id=\"uniqueLongestSitting\" style=\"font-size: 20px; font-weight: bold; color: #ffc107;\">-- mins</p>\n    </div>\n    <div\n        style=\"background-color: #ffffff; border: 1px solid #ddd; border-radius: 10px; padding: 20px; width: 200px; height: 100px; display: flex; flex-direction: column; align-items: center; justify-content: center;\">\n        <i class=\"fa fa-heartbeat\" aria-hidden=\"true\" style=\"font-size: 40px; color: #dc3545;\"></i>\n        <h3 style=\"margin: 10px 0 5px; font-size: 18px;\">Physical Activity</h3>\n        <p id=\"uniqueActivityLevel\" style=\"font-size: 20px; font-weight: bold; color: #dc3545;\">--</p>\n    </div>\n</div>\n\n<script>\n(function(scope) {\nscope.$watch('msg.payload', function(uniqueData) {\nconst originalUniqueData = uniqueData;\n\n// Function to filter data based on the selected date range\nfunction uniqueFilterData(dateFilter) {\nconst filteredUniqueData = originalUniqueData.filter(d => {\nconst dataDate = new Date(d.timestamp);\nconst today = new Date();\ntoday.setHours(0, 0, 0, 0); // Normalize time\n\nif (dateFilter === 'today') {\nreturn dataDate >= today;\n} else if (dateFilter === 'yesterday') {\nconst yesterday = new Date(today);\nyesterday.setDate(today.getDate() - 1);\nreturn dataDate >= yesterday && dataDate < today; } else if (dateFilter==='last7days' ) { const last7Days=new\n    Date(today); last7Days.setDate(today.getDate() - 7); return dataDate>= last7Days;\n    } else if (dateFilter === 'last30days') {\n    const last30Days = new Date(today);\n    last30Days.setDate(today.getDate() - 30);\n    return dataDate >= last30Days;\n    }\n    return true; // Default to 'all'\n    });\n\n    return filteredUniqueData;\n    }\n\n    // Function to convert minutes to HH:MM:SS\n    function convertToHHMMSS(minutes) {\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = Math.floor(minutes % 60);\n    const seconds = Math.floor((minutes * 60) % 60);\n    return `${hours.toString().padStart(2, '0')}:${remainingMinutes.toString().padStart(2,\n    '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n\n    // Function to update metrics\n    function updateUniqueMetrics() {\n    const dateFilter = document.getElementById('uniqueDateFilter').value;\n    const filteredData = uniqueFilterData(dateFilter);\n\n    const totalSittingTime = filteredData.reduce((sum, row) => sum + row.sitting_time, 0);\n    const totalBreaks = filteredData.length;\n    const longestSitting = Math.max(...filteredData.map(row => row.sitting_time), 0);\n\n    let goodBreaks = 0;\n    filteredData.forEach(row => {\n    if (row.sitting_time <= 30 && row.break_duration>= 2) {\n        goodBreaks++;\n        } else if (row.sitting_time <= 60 && row.break_duration>= 5) {\n            goodBreaks++;\n            }\n            });\n\n            const activityLevel = (goodBreaks / filteredData.length) > 0.75\n            ? 'High'\n            : (goodBreaks / filteredData.length) > 0.5\n            ? 'Medium'\n            : 'Low';\n\n            // Update UI elements with converted time\n            document.getElementById('uniqueTotalSittingTime').innerText = convertToHHMMSS(totalSittingTime);\n            document.getElementById('uniqueTotalBreaks').innerText = totalBreaks; // Breaks remain as a count\n            document.getElementById('uniqueLongestSitting').innerText = convertToHHMMSS(longestSitting);\n            document.getElementById('uniqueActivityLevel').innerText = activityLevel;\n            }\n\n            // Initial render\n            updateUniqueMetrics();\n\n            // Add event listener for date filter dropdown\n            document.getElementById('uniqueDateFilter').addEventListener('change', updateUniqueMetrics);\n            });\n            })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "59b5a719833c1409",
        "type": "ui_template",
        "z": "54f475575ae2a42e",
        "group": "ui-group-states",
        "name": "Current State",
        "order": 1,
        "width": 12,
        "height": 5,
        "format": "<div id=\"stateDisplay\"\n    style=\"text-align: center; padding: 20px; background-color: #f5f5f5; border-radius: 10px; width: 300px; margin: auto; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\">\n    <h2 id=\"stateLabel\" style=\"font-size: 24px; font-weight: bold; margin-bottom: 10px;\">--</h2>\n    <p id=\"stateEmoji\" style=\"font-size: 64px; margin: 0;\"></p>\n</div>\n\n<script>\n    (function(scope) {\n    const stateMappings = {\n        sitting: {\n            label: \"Sitting\",\n            color: \"#007bff\",\n            emoji: \"üë®‚Äçüíª\"\n        },\n        idle: {\n            label: \"Idle\",\n            color: \"#28a745\",\n            emoji: \"üí§üö∂\"\n        }\n    };\n\n    // Watch for changes to the incoming msg.payload\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.state) {\n            const state = payload.state.state.toLowerCase(); // Ensure lowercase for matching\n            const mapping = stateMappings[state] || { label: \"Unknown\", color: \"#6c757d\", emoji: \"‚ùì\" };\n\n            // Update the state display dynamically\n            const stateLabel = document.getElementById(\"stateLabel\");\n            const stateEmoji = document.getElementById(\"stateEmoji\");\n            const stateDisplay = document.getElementById(\"stateDisplay\");\n\n            stateLabel.innerText = mapping.label;\n            stateLabel.style.color = mapping.color;\n            stateEmoji.innerText = mapping.emoji;\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "sqlite",
        "type": "sqlite",
        "z": "54f475575ae2a42e",
        "mydb": "e7c2a34a01e283b1",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO data (timestamp, break_duration, break_type, sitting_time) VALUES (:timestamp, :break_duration, :break_type, :sitting_time);",
        "name": "Store Data",
        "x": 470,
        "y": 720,
        "wires": [
            [
                "0533a6ee37d80272"
            ]
        ]
    },
    {
        "id": "0533a6ee37d80272",
        "type": "sqlite",
        "z": "54f475575ae2a42e",
        "mydb": "e7c2a34a01e283b1",
        "sqlquery": "fixed",
        "sql": "SELECT timestamp, break_duration, sitting_time FROM data;",
        "name": "Query SQLite Data",
        "x": 670,
        "y": 720,
        "wires": [
            [
                "66ca06e07d3bb6c6",
                "df0d2da7a1e07c21"
            ]
        ]
    },
    {
        "id": "3089531b51b59797",
        "type": "rpi-gpio out",
        "z": "54f475575ae2a42e",
        "name": "Buzzer",
        "pin": "16",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 650,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d4188725c0e56f71",
        "type": "debug",
        "z": "54f475575ae2a42e",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1180,
        "wires": []
    },
    {
        "id": "4e427f6e07fd4e4b",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Handle Buzzer Trigger",
        "func": "const BUZZER_PIN = 17; // GPIO pin for the buzzer (change as needed)\n\n// Retrieve the previous state from context (default to null if undefined)\nconst previousState = context.get(\"previousState\") || null;\n\n// Get the current state from the message\nconst currentState = msg.payload.state.state;\n\n// Check if the state has changed\nif (currentState !== previousState) {\n    // Update the previous state in context\n    context.set(\"previousState\", currentState);\n\n    // If the new state is \"sitting\" or \"idle\", trigger the buzzer\n    if (currentState === \"sitting\" || currentState === \"idle\") {\n        global.set(\"BUZZER_ACTIVE\", true); // Track active state globally\n        msg.payload = 1; // Activate buzzer\n\n        // Schedule buzzer turn-off after 1 second\n        setTimeout(() => {\n            global.set(\"BUZZER_ACTIVE\", false); // Update global state\n            msg.payload = 0; // Deactivate buzzer\n            node.send(msg); // Send the off signal\n        }, 10); // 1 second duration\n    } else {\n        // If the state changes to something else, ensure the buzzer is off\n        global.set(\"BUZZER_ACTIVE\", false);\n        msg.payload = 0; // Ensure buzzer is deactivated\n    }\n} else {\n    // If the state has not changed, do nothing\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "d4188725c0e56f71",
                "3089531b51b59797"
            ]
        ]
    },
    {
        "id": "c80d86d104f8668a",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "3ca03a857b78f51b",
        "order": 3,
        "width": "28",
        "height": "1"
    },
    {
        "id": "bb7778704927a9fb",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "1cc16e4bb37be540",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "e1e1935025fa5873",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "68d0fbd360d6e577",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "4f5a631a9b363416",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "f6b015168d70f34b",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "ffc3b7fdd3cb181e",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "85a601096d9b4a70",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "bffca8152b1bb908",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "6f12412b06700b73",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "23055e441ce4d776",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "d849e2f90cc76548",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "fb99e7262f6b2390",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "9ee273c8803395f4",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-sensors",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "aa41a2db18baa905",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-states",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "afeb4cd9ea0ccea2",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-states",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "9f99212f02913a37",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-states",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "53c9f88b540680c0",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-states",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "3795a2bfaa6a6308",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "ui-group-states",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "55769160a9591fe8",
        "type": "mqtt-broker",
        "name": "Sensor Data (Home)",
        "broker": "192.168.2.66",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fa246d6d41555952",
        "type": "websocket-listener",
        "path": "/fitclock",
        "wholemsg": "false"
    },
    {
        "id": "ui-group-graphs",
        "type": "ui_group",
        "name": "Graphs",
        "tab": "dashboard-tab",
        "order": 1,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui-group-summaries",
        "type": "ui_group",
        "name": "Summaries",
        "tab": "dashboard-tab",
        "order": 3,
        "width": 13
    },
    {
        "id": "ui-group-sensors",
        "type": "ui_group",
        "name": "Sensors",
        "tab": "dashboard-tab",
        "order": 2,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui-group-states",
        "type": "ui_group",
        "name": "States",
        "tab": "dashboard-tab",
        "order": 4,
        "width": 13
    },
    {
        "id": "e7c2a34a01e283b1",
        "type": "sqlitedb",
        "db": "/home/srahat/Desktop/FitClock/sqlite/data.db",
        "mode": "RWC"
    },
    {
        "id": "3ca03a857b78f51b",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard-tab",
        "type": "ui_tab",
        "name": "FitClock Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]