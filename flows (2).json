[
    {
        "id": "54f475575ae2a42e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6a5eebd2296250c5",
        "type": "mqtt in",
        "z": "54f475575ae2a42e",
        "name": "",
        "topic": "lapinamk/fitclock",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ec42b3e049cd8b3f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 140,
        "wires": [
            [
                "c90a7112aeebb5ad"
            ]
        ]
    },
    {
        "id": "0ab37621d0d03c78",
        "type": "debug",
        "z": "54f475575ae2a42e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload.state",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "c90a7112aeebb5ad",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Logic For State",
        "func": "// Initialize or retrieve counters and the current state from context storage\nlet sittingCount = context.get('sittingCount') || 0;\nlet idleCount = context.get('idleCount') || 0;\nlet currentState = context.get('currentState') || 'idle';\n\n// Extract distance and motion from the incoming payload\nconst distance = parseFloat(msg.payload.distance);\nconst motion = msg.payload.motion === true;\n\n// Determine if the conditions for sitting or idle are met\nif (motion && distance < 100) {\n    sittingCount++;\n    idleCount = 0;  // Reset idle counter since we have a sitting indication\n} else if (motion && distance > 100) {\n    idleCount++;\n    sittingCount = 0;  // Reset sitting counter since we have an idle indication\n} else {\n    // Reset both counters if neither condition is clearly met\n    sittingCount = 0;\n    idleCount = 0;\n}\n\n// Update the state based on the counters\nif (sittingCount >= 2 && currentState !== 'sitting') {\n    currentState = 'sitting';\n    sittingCount = 0;  // Reset the counter after confirming the state change\n} else if (idleCount >= 2 && currentState !== 'idle') {\n    currentState = 'idle';\n    idleCount = 0;  // Reset the counter after confirming the state change\n}\n\n// Store the updated counts and state in the context\ncontext.set('sittingCount', sittingCount);\ncontext.set('idleCount', idleCount);\ncontext.set('currentState', currentState);\n\n// Set the output message payload with state embedded\nmsg.payload.state = {\n    state: currentState,\n};\n\n// Return the modified message object to pass it to the next node in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "5cc796fce5c0da70",
                "0ab37621d0d03c78"
            ]
        ]
    },
    {
        "id": "79f646c514f622f6",
        "type": "ui_chart",
        "z": "54f475575ae2a42e",
        "name": "",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Graphs",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 680,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "561fcbe4e7a68445",
        "type": "sqlite",
        "z": "54f475575ae2a42e",
        "mydb": "7dc0604ab7281903",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Databse",
        "x": 420,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "5cc796fce5c0da70",
        "type": "function",
        "z": "54f475575ae2a42e",
        "name": "Logic For Time Tracking",
        "func": "// Context variables for timer and notifications\nlet timer = context.get('timer') || null;\nlet startTime = context.get('startTime') || null;\nlet idleStartTime = context.get('idleStartTime') || null;\nlet elapsedTime = context.get('elapsedTime') || 0;\nlet lastNotificationTime = context.get('lastNotificationTime') || 0;\nlet notificationsSent = context.get('notificationsSent') || 0;\nlet isIdle = context.get('isIdle') || false;\n\n// Incoming data\nlet currentState = msg.payload.state.state;\n\n// Current timestamp\nlet now = Date.now();\n\n// Helper function to format time in HH:MM:SS\nfunction formatTime(seconds) {\n    const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');\n    const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');\n    const secs = String(seconds % 60).padStart(2, '0');\n    return `${hrs}:${mins}:${secs}`;\n}\n\n// Notification lists\nconst idleMessage = \"Hi, I'm FitClock, your health assistant!\";\nconst sittingNotifications = [\n    \"Rise up and move around!\",\n    \"Time for some stretches!\",\n    \"Time to move your body!\"\n];\nconst breakBenefits = [\n    \"Taking breaks from sitting can boost performance\",\n    \"Taking breaks helps to recharge throughout the day\",\n    \"Not sitting for extended periods prevents future health issues\",\n    \"Walking around is the most efficient way to pause sitting\"\n];\nconst extendedSittingNotifications = [\n    \"Time for a short walk!\",\n    \"Go have a snack!\",\n    \"Time for some exercise!\",\n    \"Go outside for some fresh air!\",\n    \"You have been sitting for too long, time to move!\"\n];\n\n// Function to select a random notification from a list\nfunction getRandomNotification(list) {\n    return list[Math.floor(Math.random() * list.length)];\n}\n\n// State-based logic\nif (currentState === \"sitting\") {\n    if (!timer) {\n        // Start the timer if not already running\n        startTime = Date.now() - elapsedTime * 1000; // Adjust for accumulated time\n        timer = setInterval(() => {\n            elapsedTime = Math.floor((Date.now() - startTime) / 1000);\n            node.send({ payload: { timer: formatTime(elapsedTime) } });\n        }, 1000);\n        context.set('startTime', startTime);\n        context.set('timer', timer);\n        context.set('idleStartTime', null);\n    }\n\n    isIdle = false;\n\n    // Send notifications every 30 minutes\n    if (now - lastNotificationTime >= 0.5 * 60 * 1000) {\n        notificationsSent++;\n        if (notificationsSent === 1) {\n            msg.notification = getRandomNotification(sittingNotifications);\n        } else {\n            msg.notification = getRandomNotification(extendedSittingNotifications);\n        }\n        msg.buzzer = true;\n        lastNotificationTime = now;\n\n        // Schedule notification clearance after 3 seconds\n        setTimeout(() => {\n            node.send({ payload: { notification: \"\", buzzer: false } });\n        }, 3000);\n    } else {\n        msg.buzzer = false;\n    }\n} else if (currentState === \"idle\") {\n    if (timer) {\n        // Stop the timer and save elapsed time\n        clearInterval(timer);\n        timer = null;\n        elapsedTime = Math.floor((Date.now() - startTime) / 1000);\n        node.send({ payload: { timer: formatTime(elapsedTime) } });\n        context.set('elapsedTime', elapsedTime);\n        context.set('timer', null);\n        context.set('startTime', null);\n    }\n\n    // Start idle timer if not already started\n    if (!idleStartTime) {\n        idleStartTime = Date.now();\n        context.set('idleStartTime', idleStartTime);\n    }\n\n    // Send break benefit notification when the user gets up\n    if (!isIdle) {\n        msg.notification = getRandomNotification(breakBenefits);\n        isIdle = true;\n        notificationsSent = 0;\n        lastNotificationTime = now;\n        msg.buzzer = false;\n\n        // Schedule notification clearance after 3 seconds\n        setTimeout(() => {\n            node.send({ payload: { notification: \"\", buzzer: false } });\n        }, 3000);\n    }\n\n    // Check if idle state has persisted for 5 minutes\n    const idleDuration = Math.floor((Date.now() - idleStartTime) / 1000);\n    if (idleDuration >= 300) {\n        elapsedTime = 0;\n        context.set('elapsedTime', 0);\n        context.set('idleStartTime', null);\n        node.send({ payload: { timer: \"00:00:00\" } });\n    }\n} else {\n    // Unexpected state\n    node.warn(`Unexpected state: ${currentState}`);\n    msg.notification = idleMessage;\n    msg.buzzer = false;\n    if (timer) clearInterval(timer);\n    context.set('timer', null);\n    context.set('startTime', null);\n    context.set('idleStartTime', null);\n    context.set('elapsedTime', 0);\n    node.send({ payload: { timer: \"00:00:00\" } });\n}\n\n// Update context variables\ncontext.set('timer', timer);\ncontext.set('startTime', startTime);\ncontext.set('elapsedTime', elapsedTime);\ncontext.set('idleStartTime', idleStartTime);\ncontext.set('lastNotificationTime', lastNotificationTime);\ncontext.set('notificationsSent', notificationsSent);\ncontext.set('isIdle', isIdle);\n\n// Return the combined payload\nmsg.payload = {\n    notification: msg.notification || idleMessage,\n    buzzer: msg.buzzer || false\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 160,
        "wires": [
            [
                "797ded34ddb8ee6e"
            ]
        ]
    },
    {
        "id": "797ded34ddb8ee6e",
        "type": "websocket out",
        "z": "54f475575ae2a42e",
        "name": "",
        "server": "fa246d6d41555952",
        "client": "",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "c47d39e9175ebbde",
        "type": "http in",
        "z": "54f475575ae2a42e",
        "name": "http",
        "url": "/fitclock",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "397ff24f4945c539"
            ]
        ]
    },
    {
        "id": "397ff24f4945c539",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "script.js",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "// Function to update the time in Helsinki\nfunction updateTime() {\n    const optionsTime = {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: true\n    };\n\n    const optionsDate = {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    };\n\n    // Get Helsinki time and date\n    const helsinkiTime = new Date().toLocaleString('en-US', {\n        ...optionsTime,\n        timeZone: 'Europe/Helsinki'\n    });\n\n    const helsinkiDate = new Date().toLocaleString('en-US', {\n        ...optionsDate,\n        timeZone: 'Europe/Helsinki'\n    });\n\n    // Update the clock container\n    document.getElementById('time').textContent = helsinkiTime;  // Update time\n    document.getElementById('description').textContent = helsinkiDate;  // Update description\n}\n\n// Update time every second\nsetInterval(updateTime, 1000);\n\n// Initial call to display the time immediately\nupdateTime();\n\n\n\n\n// Connect to the Node-RED WebSocket\nconst ws = new WebSocket(\"ws://\" + window.location.host + \"/fitclock\");\n\n// Listen for messages from Node-RED\nws.onmessage = function(event) {\n    const data = JSON.parse(event.data); // Parse the incoming JSON\n\n    // Update the timer\n    if (data.timer) {\n        const sensorDataElement = document.querySelector(\".sensor-data\");\n        if (sensorDataElement) {\n            sensorDataElement.textContent = data.timer;\n        }\n    }\n\n    // Update the notification\n    if (data.notification) {\n        const notificationElement = document.getElementById(\"notification-text\");\n        if (notificationElement) {\n            notificationElement.textContent = data.notification;\n\n            // Clear the notification after 3 seconds\n            setTimeout(() => {\n                notificationElement.textContent = \"\"; // Clear notification\n            }, 3000);\n        }\n    }\n};\n\n// Handle WebSocket errors\nws.onerror = function(error) {\n    console.error(\"WebSocket error:\", error);\n};\n\n// Log WebSocket connection status\nws.onopen = function() {\n    console.log(\"WebSocket connection established.\");\n};\n\nws.onclose = function() {\n    console.log(\"WebSocket connection closed.\");\n};\n",
        "output": "str",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "4d63b265fed1bca8"
            ]
        ]
    },
    {
        "id": "4d63b265fed1bca8",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "style.css",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    margin: 0;\n    background-color: #222;\n    color: #fff;\n}\n\n/* Grid container */\n.dashboard {\n    display: grid;\n    grid-template-columns: 1fr 1fr; /* 2 columns */\n    gap: 20px;\n    width: 100vw;\n    height: 100vh;\n    background-color: darkblue;\n    padding: 40px;\n    border-radius: 10px;\n}\n\n/* Container styling */\n.container {\n    background-color: #333;\n    border-radius: 10px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\n}\n/* Flex layout for weather and sensors */\n#weather, #sensors {\n    flex-direction: row;  /* Align items horizontally */\n    justify-content: center; /* Center items horizontally */\n    align-items: center;  /* Center items vertically */\n}\n\n.weather-icon, .meditation-icon {\n    margin-left: 10px;  /* Adds space between the text and icon */\n    font-size: 5rem;  /* Adjust the size of the icon */\n}\n\n/* Individual container styles */\n/*#main_dashboard{\n    background-color: darkblue;\n}\n*/\n#weather {\n    background-color: #4A90E2;\n}\n\n#clock {\n    background-color: #34495E;\n    justify-content: center;\n}\n\n#sensors {\n    background-color: #27AE60;\n}\n\n#notifications {\n    background-color: #E74C3C;\n    justify-content: center;\n}\n\n/* Sample text styling */\n.temp, .time, .sensor-data {\n    font-size: 6em;\n    font-weight: bold;\n}\n.notification {\n    font-size: 3em;\n    font-weight: bold;\n}\n\n.description {\n    font-size: 2em;\n    margin-top: 10px;\n    opacity: 0.8;\n}",
        "output": "str",
        "x": 500,
        "y": 360,
        "wires": [
            [
                "1ba9f18b446f8083"
            ]
        ]
    },
    {
        "id": "1ba9f18b446f8083",
        "type": "template",
        "z": "54f475575ae2a42e",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>FitClock</title>\n    <style>\n        {{{payload.style}}}\n    </style>\n\n</head>\n\n<body>\n\n    <div class=\"dashboard\" id=\"main_dashboard\">\n        <!-- Weather Container -->\n        <div class=\"container\" id=\"weather\">\n            <div class=\"temp\">25°C</div>\n            <div class=\"weather-icon\">🌥️</div>\n        </div>\n\n        <!-- Clock Container -->\n        <div class=\"container\" id=\"clock\">\n            <div class=\"time\" id=\"time\">12:00</div>\n            <div class=\"description\" id=\"description\">Sunday, Jan 1, 2024</div>\n        </div>\n\n        <!-- Sensors Container -->\n        <div class=\"container\" id=\"sensors\">\n            <div class=\"sensor-data\">00:00:00</div>\n            <div class=\"meditation-icon\">🧘</div>\n        </div>\n\n        <!-- Notifications Container -->\n        <div class=\"container\" id=\"notifications\">\n            <div class=\"notification\" id=\"notification\">5 minutes left for a break!</div>\n        </div>\n    </div>\n    <!-- Link to external JS file -->\n    <script>\n        {{{payload.script}}}\n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 650,
        "y": 360,
        "wires": [
            [
                "fc89f1bf96273b58"
            ]
        ]
    },
    {
        "id": "fc89f1bf96273b58",
        "type": "http response",
        "z": "54f475575ae2a42e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 360,
        "wires": []
    },
    {
        "id": "c80d86d104f8668a",
        "type": "ui_spacer",
        "z": "54f475575ae2a42e",
        "name": "spacer",
        "group": "3ca03a857b78f51b",
        "order": 3,
        "width": "28",
        "height": "1"
    },
    {
        "id": "ec42b3e049cd8b3f",
        "type": "mqtt-broker",
        "name": "Sensor-Data",
        "broker": "172.16.200.85",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7dc0604ab7281903",
        "type": "sqlitedb",
        "db": "/Users/asksamar/Desktop/FitClock/FitClock/sqlite/data.db",
        "mode": "RWC"
    },
    {
        "id": "fa246d6d41555952",
        "type": "websocket-listener",
        "path": "/fitclock",
        "wholemsg": "false"
    },
    {
        "id": "3ca03a857b78f51b",
        "type": "ui_group",
        "name": "Default",
        "tab": "b74e630c4b73d102",
        "order": 1,
        "disp": false,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b74e630c4b73d102",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]